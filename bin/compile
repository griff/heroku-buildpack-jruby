#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e

# debug
#set -x

# clean up leaking environment
unset GIT_DIR

bp_dir=$(cd $(dirname $0); cd ..; pwd)

# parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3


JVM_COMMON_BUILDPACK=http://lang-jvm.s3.amazonaws.com/jvm-buildpack-common-v10.tar.gz
mkdir -p /tmp/jvm-common
curl --silent --location $JVM_COMMON_BUILDPACK | tar xzm -C /tmp/jvm-common
. /tmp/jvm-common/bin/util
. /tmp/jvm-common/bin/java

export_env_dir $ENV_DIR


function download_and_install_jdk {
  # install JDK
  javaVersion=$(detect_java_version ${BUILD_DIR})
  status_pending "Installing OpenJDK ${javaVersion}"
  install_java ${BUILD_DIR} ${javaVersion}
  jdk_overlay ${BUILD_DIR}
  status_done
}

function download_jruby_and_install_default_gems {
  if [ ! -d "$CACHE_DIR/jruby-$VERSION" ]; then
    mkdir -p $CACHE_DIR
    echo "-----> Deleting previous JRuby installations if any"
    rm -rf $CACHE_DIR/jruby-*
    JRUBY_TAR=http://jruby.org.s3.amazonaws.com/downloads/$VERSION/jruby-bin-$VERSION.tar.gz
    echo "-----> Downloading and unpacking JRuby"
    curl $JRUBY_TAR -s -o - | tar xzf - -C $CACHE_DIR/
    PATH=$CACHE_DIR/jruby-$VERSION/bin:$PATH

    echo "-----> Installing Bundler"
    jruby $JRUBY_OPTS -S jgem install bundler | indent; test ${PIPESTATUS[0]} -eq 0
  fi
}

function copy_jruby_to_build {
  echo "-----> Vendoring JRuby into slug"
  cp -ru $CACHE_DIR/jruby-$VERSION $BUILD_DIR/jruby
  PATH=$BUILD_DIR/jruby/bin:$PATH
}

function get_bundle_cache {
  if [ -d $BUNDLE_CACHE ]; then
    mkdir -p $BUNDLE_DIR
    cp -ru $BUNDLE_CACHE/* $BUNDLE_DIR
  fi
}

function store_bundle_cache {
  rm -rf $BUNDLE_CACHE
  mkdir -p $BUNDLE_CACHE
  cp -ru $BUNDLE_DIR/* $BUNDLE_CACHE
}

function bundle_install {
  echo "-----> Installing dependencies with Bundler"

  cd $BUILD_DIR
  jruby $JRUBY_OPTS -S bundle install --without development:test --binstubs --deployment --clean | indent; test ${PIPESTATUS[0]} -eq 0

  echo "Dependencies installed" | indent
}

function bundle_install_with_cache {
  BUNDLE_CACHE=$CACHE_DIR/vendor/bundle
  BUNDLE_DIR=$BUILD_DIR/vendor/bundle

  get_bundle_cache
  bundle_install
  store_bundle_cache
}

function jbundle_install {
  if [ -f $BUILD_DIR/Jarfile ]; then
    echo "-----> Installing dependencies with JBundler"

    export JARS_HOME=$CACHE_DIR/.m2/repository

    cd $BUILD_DIR
    jruby $JRUBY_OPTS bin/jbundle install --debug --vendor | indent; test ${PIPESTATUS[0]} -eq 0

    echo "Dependencies installed" | indent
  fi
}

function install_rails_log_stdout {
  if [ -f $BUILD_DIR/config/environment.rb ]; then
    PLUG_DIR=$BUILD_DIR/vendor/plugins/rails_log_stdout
    mkdir -p $PLUG_DIR
    cd $PLUG_DIR
    curl https://github.com/ddollar/rails_log_stdout/tarball/master -s -o - | tar xzf -
    cd -
  fi
}

function install_rails3_server_static_assets {
  if [ -f $BUILD_DIR/config/application.rb ]; then
    PLUG_DIR=$BUILD_DIR/vendor/plugins/rails3_server_static_assets
    mkdir -p $PLUG_DIR
    cd $PLUG_DIR
    curl 'https://github.com/pedro/rails3_serve_static_assets/tarball/master' -s -o - | tar xzf -
    cd -
  fi
}

function create_database_yml {
  echo "-----> Writing config/database.yml to read from DATABASE_URL"
  mkdir -p $BUILD_DIR/config
  cat > $BUILD_DIR/config/database.yml << EOF
<%
require 'cgi'
require 'uri'

begin
  uri = URI.parse(ENV["DATABASE_URL"])
rescue URI::InvalidURIError
  raise "Invalid DATABASE_URL"
end

raise "No RACK_ENV or RAILS_ENV found" unless ENV["RAILS_ENV"] || ENV["RACK_ENV"]

def attribute(name, value, force_string = false)
  if value
    value_string =
      if force_string
        '"' + value + '"'
      else
        value
      end
    "#{name}: #{value_string}"
  else
    ""
  end
end

adapter = uri.scheme
adapter = "jdbcpostgresql" if adapter == "postgres"
database = (uri.path || "").split("/")[1]
username = uri.user
password = uri.password
host = uri.host
port = uri.port
params = CGI.parse(uri.query || "")
%>

<%= ENV["RAILS_ENV"] || ENV["RACK_ENV"] %>:
  <%= attribute "adapter",  adapter %>
  <%= attribute "database", database %>
  <%= attribute "username", username %>
  <%= attribute "password", password, true %>
  <%= attribute "host",     host %>
  <%= attribute "port",     port %>

<% params.each do |key, value| %>
  <%= key %>: <%= value.first %>
<% end %>
EOF
}

function precompile_assets {
  cd $BUILD_DIR
  if ( env RAILS_ENV=production RAILS_GROUPS=assets jruby $JRUBY_OPTS -S bin/rake --dry-run --silent assets:precompile )
  then
    echo "-----> Precompiling assets"
    env RAILS_ENV=production RAILS_GROUPS=assets DATABASE_URL=postgres://user:pass@127.0.0.1/dbname jruby $JRUBY_OPTS -S bin/rake assets:precompile 2>&1 | indent; test ${PIPESTATUS[0]} -eq 0
  fi
}

# Look for JRuby version in Gemfile
VERSION=`grep ^ruby $BUILD_DIR/Gemfile | sed 's/.*version[^0-9]*\([0-9\.]*\).*/\1/'`
# Try find preferred Ruby mode in the Gemfile
MODE=`grep ^ruby $BUILD_DIR/Gemfile | cut -c 7-9`

export JRUBY_OPTS="--$MODE -J-Xmx400m -Xcext.enabled=true -J-XX:+UseCompressedOops -J-noverify"

download_and_install_jdk
download_jruby_and_install_default_gems
copy_jruby_to_build
bundle_install_with_cache
jbundle_install

create_database_yml
precompile_assets

# install_rails_log_stdout
# install_rails3_server_static_assets

echo "-----> exporting PATH"
PROFILE_PATH="$BUILD_DIR/.profile.d/jruby.sh"
mkdir -p $(dirname $PROFILE_PATH)
cat << EOF > $PROFILE_PATH
export JRUBY_OPTS=\${JRUBY_OPTS:-"-J-Xmx400m -J-XX:+UseCompressedOops -J-noverify"}
export JRUBY_OPTS="--$MODE \$JRUBY_OPTS"
export RACK_ENV=\${RACK_ENV:-production}
export RAILS_ENV=\${RAILS_ENV:-production}
export PATH="\$HOME/bin:\$HOME/jruby/bin:\$PATH"
EOF

if [ -w ${bp_dir} ]; then
  cat << EOF > ${bp_dir}/export
export JRUBY_OPTS=\${JRUBY_OPTS:-"-J-Xmx400m -J-XX:+UseCompressedOops -J-noverify"}
export JRUBY_OPTS="--$MODE \$JRUBY_OPTS"
export RACK_ENV=\${RACK_ENV:-production}
export RAILS_ENV=\${RAILS_ENV:-production}
export PATH="$BUILD_DIR/bin:$BUILD_DIR/jruby/bin:\$PATH"
EOF
fi
